@layout('master')

@section('map_monitors')

<style>
  body { margin: 0; padding: 0; }
  #mapMonitors { 
    position: absolute;   
    margin-right: 220px; 
    width: calc(100% - 220px); 
    height: 100vh; 
    transition: width 0.3s ease;
  }
  
  .mapboxgl-popup {
    max-width: 200px;
    font-size: 12px;
  }

  @media (max-width: 991px) {
    #mapMonitors {
      width: 100%;
    }
  }
</style>


<div id='mapMonitors'></div>

<div class="modal fade"   tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true" id="ModalAlertLocation">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
                <div class="modal-header justify-content-around" style="background:#0d6efd; color:#FFFFFF; ">
                    <h2>Encontrar mi ubicación</h2>
                </div>
                <div class="modal-body ">
                    <p>Para ubicarte en el mapa presiona el boton <img src="img/icon_location.png" alt="0" width="50" height="25"> en la esquina superior derecha.</p>
                </div>
        </div>
    </div>
</div>

<script>

let monitors_high=0;
const MODEL_PURPLE='PURPLE_AIR'
const getColor = (pm2, pm10) => {
  const colorRanges = [
    { range: [250.4, 425], color: '#7E0023' },
    { range: [150.5, 355], color: '#A8549D' },
    { range: [55.5, 255], color: '#7E0023' },
    { range: [35.5, 155], color: '#FC7928' },
    { range: [12.1, 55], color: '#EDB02D' },
    { range: [0, 0], color: '#38B208' },
    { range: [-Infinity, -Infinity], color: '#808080' },
  ];

  const matchingRange = colorRanges.find(({ range }) => pm2 > range[0] || pm10 > range[1]);

  return matchingRange ? matchingRange.color : '#808080';
};
mapboxgl.accessToken = 'pk.eyJ1Ijoic2lzdGVtYXNjZXJjYSIsImEiOiJjbDRldWE2ZjAwMjI3M2JwOHpsb21jbHpxIn0.jLF2ydLoAdgrv68l8iM2VQ';

let divMap=document.getElementById('mapMonitors')


let map = new mapboxgl.Map({
    container: divMap,
    style: 'mapbox://styles/mapbox/streets-v11',
    center:[-110.143592,23.655148],
    zoom:8
});

map.addControl(new mapboxgl.NavigationControl());
map.addControl(new mapboxgl.GeolocateControl());
map.addControl(new mapboxgl.FullscreenControl());
map.addControl(new mapboxgl.ScaleControl());


fetch('/banner_monitor')
.then(response => {
    if (!response.ok) {
      throw new Error(`Error de red - Código de estado: ${response.status}`);
    }
    return response.json();
})
.then(data => {
     
    data.map(banner => {
        
      let color='#38B208';    
      let popup=new mapboxgl.Popup({ offset: 25 }).setMaxWidth('200');
      let coordinates=[banner.longitude,banner.latitude];
      popup.setHTML(banner.html);

      if(banner.PM_2>12.1){
        monitors_high++;
      }

      if(banner.monitor.monitor.model.name!=MODEL_PURPLE){
        color='#2CECC6'
      }else{
        color=getColor(banner.PM_2, banner.PM_10)
      }

      new mapboxgl.Marker({color:color})
        .setLngLat(coordinates)
        .setPopup(popup) 
        .addTo(map);
    });

    if(monitors_high>2){
        alert("Las condiciones de calidad de aire no son favorables.")
    }

})
.catch(error => {
    console.error('Error en la petición de monitores:', error);
});

window.onload= function(){
    const myModalLo = document.querySelector('#ModalAlertLocation')

    const modal = new bootstrap.Modal(myModalLo)
    modal.show()
}

</script>
@end